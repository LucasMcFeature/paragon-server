=======================================
purpose
=======================================

This document describes the installation and deployment process for web services.


=======================================
definitions
=======================================

$app : the project home directory; e.g.: c:\projects\attributes
$bin : the project bin directory; e.g.:  c:\projects\attributes\java\bin


=======================================
download
=======================================

http://ws.apache.org/axis/java/releases.html

This install used version 1.4 final.
Unzip it somewhere (e.g.: your desktop).


=======================================
configure web server
=======================================

We've added axis to our application, rather than adding our application to axis.
In more concrete terms we do not add axis to tomcat's webapps directory.
Instead, we add the axis libraries to our application.
Some of the following may be duplicates and can be ignored.

Copy the following files from:
    $axis/WEB-INF/lib

To:
    $app/web/WEB-INF/lib


=======================================
web.xml
=======================================

Specifically:
    $app/web/WEB-INF/web.xml

Add the following servlet mappings:

    <servlet>
        <servlet-name>axis</servlet-name>
        <display-name>Apache-Axis Servlet</display-name>
        <servlet-class>org.apache.axis.transport.http.AxisServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>axis</servlet-name>
        <url-pattern>/services/*</url-pattern>
    </servlet-mapping>


=======================================
test installation
=======================================

At this point should should start the application server (tomcat):

    $bin/kmStart.bat

You can then confirm that axis in registered with:

    http://localhost:8080/app/services


=======================================
generate
=======================================

There are several files (java, wsdl, wsdd) that are generated used Axis tools.
A batch script mostly takes care of this.

First look in the package
    com.app.service

You should find the hand-coded interface and implementation files:
    MyAttributeManager.java
    MyAttributeManagerImpl.java

Also in this package are some auto-generated files.
When you update the interface, you can use the following script to update the auto-generated files:
    $bin/svcGenerate.bat

Note: the script has some hard coded service names, and package locations.
So the script will break if you rename or move the service.
Multiple services are not currently supported, though you can have multiple methods in the service.

The compiler will generally complain about a much of warnings in the auto-generated classes.
I 'fix' this by manually adding the following annotation to each auto-generated class.
It a little annoying but we don't need to regenerate very often.
Here's the annotation:
    @SuppressWarnings("all")


=======================================
deploy
=======================================

A deployment description was created along with the java files generated from the wsdl.
Axis can potentially have multiple deployment descriptors so we need to merge ours
with the master set.  While the tomcat applciation server is running, execute the following script to deploy our services:

    $bin/svcDeploy.bat

This will create/update the following file which needs to be checked in to the project repository:

    $app/web/WEB-INF/server-config.wsdd

The following may also be useful: svcUndeploy.bat, svcRedploy.bat


=======================================
test deployment
=======================================

With tomcat running hit the following url.
Although this is the same url used before, it may fail now even if it previously worked.

    http://localhost:8080/app/services


=======================================
changes the service methods
=======================================

The following steps will be required if you change the inteface MyAttributeService.
These are the same steps described above.

    1) Regenerate the service support classes:
        $bin/svcGenerate

    2) Manually fix the generated files to suppress compiler warnings.

    3) Redeploy the wsdd
        $bin/svcRedeploy.bat

